import { Profile, ProfileService } from '..';
import { DbService } from '../../db';
import { Observable } from 'rxjs';
import { ServerProfileSearchCriteria } from '../def/server-profile-search-criteria';
import { ServerProfile } from '../def/server-profile';
import { TenantInfo } from '../def/tenant-info';
import { TenantInfoRequest } from '../def/tenant-info-request';
import { ApiService } from '../../api';
import { ProfileServiceConfig } from '../config/profile-service-config';
import { SessionAuthenticator } from '../../auth';
import { UpdateServerProfileInfoRequest } from '../def/update-server-profile-info-request';
import { Group } from '../def/group';
import { ProfilesToGroupRequest } from '../def/profiles-to-group-request';
import { ProfileRequest } from '../def/profile-request';
import { GetAllGroupRequest } from '../def/get-all-group-request';
import { ServerProfileDetailsRequest } from '../def/server-profile-details-request';
import { CachedItemStore, KeyValueStore } from '../../key-value-store';
import { ProfileSession } from '../def/profile-session';
export declare class ProfileServiceImpl implements ProfileService {
    private profileServiceConfig;
    private dbService;
    private apiService;
    private cachedItemStore;
    private keyValueStore;
    private sessionAuthenticator;
    private static readonly KEY_USER_SESSION;
    constructor(profileServiceConfig: ProfileServiceConfig, dbService: DbService, apiService: ApiService, cachedItemStore: CachedItemStore<ServerProfile>, keyValueStore: KeyValueStore, sessionAuthenticator: SessionAuthenticator);
    createProfile(profile: Profile): Observable<Profile>;
    deleteProfile(uid: string): Observable<number>;
    updateServerProfile(updateUserInfoRequest: UpdateServerProfileInfoRequest): Observable<Profile>;
    getServerProfiles(searchCriteria: ServerProfileSearchCriteria): Observable<ServerProfile[]>;
    getTenantInfo(tenantInfoRequest: TenantInfoRequest): Observable<TenantInfo>;
    getAllProfiles(profileRequest?: ProfileRequest): Observable<Profile[]>;
    createGroup(group: Group): Observable<Group>;
    deleteGroup(gid: string): Observable<number>;
    updateGroup(group: Group): Observable<Group>;
    getAllGroup(groupRequest: GetAllGroupRequest): Observable<Group[]>;
    addProfilesToGroup(profileToGroupRequest: ProfilesToGroupRequest): Observable<number>;
    getServerProfilesDetails(serverProfileDetailsRequest: ServerProfileDetailsRequest): Observable<ServerProfile>;
    getCurrentProfile(): Observable<Profile>;
    setCurrentProfile(uid: string): Observable<boolean>;
    getCurrentProfileSession(): Observable<ProfileSession>;
}
