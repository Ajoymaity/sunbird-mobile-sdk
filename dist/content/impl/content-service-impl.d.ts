import { ChildContentRequest, Content, ContentDeleteRequest, ContentDeleteResponse, ContentDetailRequest, ContentExportResponse, ContentImportRequest, ContentImportResponse, ContentRequest, ContentSearchCriteria, ContentSearchResult, ContentService, ContentServiceConfig, EcarImportRequest, HierarchyInfo } from '..';
import { Observable } from 'rxjs';
import { ApiService, Response } from '../../api';
import { ProfileService } from '../../profile';
import { KeyValueStore } from '../../key-value-store';
import { DbService } from '../../db';
import { AppConfig } from '../../api/config/app-config';
import { FileService } from '../../util/file/def/file-service';
export declare class ContentServiceImpl implements ContentService {
    private contentServiceConfig;
    private apiService;
    private dbService;
    private profileService;
    private appConfig;
    private keyValueStore;
    private fileService;
    constructor(contentServiceConfig: ContentServiceConfig, apiService: ApiService, dbService: DbService, profileService: ProfileService, appConfig: AppConfig, keyValueStore: KeyValueStore, fileService: FileService);
    getContentDetails(request: ContentDetailRequest): Observable<Content>;
    getContents(request: ContentRequest): Observable<Content>;
    cancelImport(contentId: string): void;
    deleteContent(contentDeleteRequest: ContentDeleteRequest): Observable<ContentDeleteResponse[]>;
    exportContent(contentExportRequest: ContentExportResponse): void;
    getChildContents(childContentRequest: ChildContentRequest): Observable<any>;
    getDownloadState(): Promise<any>;
    importContent(contentImportRequest: ContentImportRequest): Observable<any>;
    importEcar(ecarImportRequest: EcarImportRequest): Observable<Response<ContentImportResponse>>;
    nextContent(hierarchyInfo: HierarchyInfo[], currentContentIdentifier: string): Observable<Content>;
    prevContent(hierarchyInfo: HierarchyInfo[], currentContentIdentifier: string): Observable<Content>;
    subscribeForImportStatus(contentId: string): Observable<any>;
    searchContent(request: ContentSearchCriteria): Observable<ContentSearchResult>;
    cancelDownload(contentId: string): Observable<undefined>;
}
